"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6353],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>c,MDXProvider:()=>d,mdx:()=>h,useMDXComponents:()=>s,withMDXComponents:()=>p});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},a.apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),p=function(e){return function(t){var n=s(t.components);return o.createElement(e,a({},t,{components:n}))}},s=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},b=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,c=m(e,["components","mdxType","originalType","parentName"]),p=s(n),d=r,u=p["".concat(i,".").concat(d)]||p[d]||f[d]||a;return n?o.createElement(u,l(l({ref:t},c),{},{components:n})):o.createElement(u,l({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=b;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}b.displayName="MDXCreateElement"},52954:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>m,default:()=>f,frontMatter:()=>l,metadata:()=>c,toc:()=>s});var o=n(87462),r=n(63366),a=(n(67294),n(3905)),i=["components"],l={id:"mountable-preallocation",title:"Content Pooling"},m=void 0,c={unversionedId:"mainconcepts/mountablecomponents/mountable-preallocation",id:"mainconcepts/mountablecomponents/mountable-preallocation",title:"Content Pooling",description:"When a Mountable Component is being mounted, its content (View or Drawable) needs to be either initialized or reused from the recycling pool. If the pool is empty, a new instance will be created at that time, which might keep the UI thread too busy and drop one or more frames. To mitigate that, the Litho framework can pre-allocate a few instances and put them in the recycling pool to improve performance.",source:"@site/../docs/mainconcepts/mountablecomponents/mountable-preallocation.mdx",sourceDirName:"mainconcepts/mountablecomponents",slug:"/mainconcepts/mountablecomponents/mountable-preallocation",permalink:"/docs/mainconcepts/mountablecomponents/mountable-preallocation",draft:!1,editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/mainconcepts/mountablecomponents/mountable-preallocation.mdx",tags:[],version:"current",frontMatter:{id:"mountable-preallocation",title:"Content Pooling"},sidebar:"mainSidebar",previous:{title:"Controllers Pattern",permalink:"/docs/mainconcepts/mountablecomponents/mountable-controllers"},next:{title:"Flexbox Attributes",permalink:"/docs/mainconcepts/flexbox-yoga"}},p={},s=[{value:"Configuring pools",id:"configuring-pools",level:2},{value:"Pre-allocation example",id:"pre-allocation-example",level:2}],d={toc:s},u="wrapper";function f(e){var t=e.components,n=(0,r.Z)(e,i);return(0,a.mdx)(u,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,"When a Mountable Component is being mounted, its content (View or Drawable) needs to be either initialized or reused from the recycling pool. If the pool is empty, a new instance will be created at that time, which might keep the UI thread too busy and drop one or more frames. To mitigate that, the Litho framework can pre-allocate a few instances and put them in the recycling pool to improve performance."),(0,a.mdx)("admonition",{type:"note"},(0,a.mdx)("p",{parentName:"admonition"},"Content pooling is especially recommended for Mountable Components that inflate a complex View, which is time-consuming to create from scratch.")),(0,a.mdx)("h2",{id:"configuring-pools"},"Configuring pools"),(0,a.mdx)("p",null,"In order to configure content pools, the ",(0,a.mdx)("inlineCode",{parentName:"p"},"SimpleMountable")," implementation should override methods from the ",(0,a.mdx)("inlineCode",{parentName:"p"},"ContentAllocator")," interface which the abstract class SimpleMountable implements."),(0,a.mdx)("p",null,"The ",(0,a.mdx)("inlineCode",{parentName:"p"},"ContentAllocator")," interface contains a few methods to configure the pool behaviour:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"canPreallocate()")," - enables pre-allocation for this Mountable Component (disabled by default)"),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"poolSize()")," - defines the number of instances for the Litho framework to pre-allocate (default value is three)"),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"createRecyclingPool()")," - can be overridden to create a custom pool (a default pool will be created if not overridden)"),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"isRecyclingDisabled()")," - can be overridden to disable recycling for the mount content (if this method returns true, all other methods listed above are ignored)")),(0,a.mdx)("admonition",{type:"tip"},(0,a.mdx)("p",{parentName:"admonition"},"If creating new instances of the content is time-consuming but not very memory-consuming, it's recommended to keep the pool size high."),(0,a.mdx)("p",{parentName:"admonition"},"If there are memory concerns (especially for memory-consuming content), smaller pool sizes are recommended, or pooling can be disabled altogether by returning true from ",(0,a.mdx)("inlineCode",{parentName:"p"},"isRecyclingDisabled()"),".")),(0,a.mdx)("h2",{id:"pre-allocation-example"},"Pre-allocation example"),(0,a.mdx)("p",null,"In order for mount content to be pre-allocated, at least the ",(0,a.mdx)("inlineCode",{parentName:"p"},"canPreallocate()")," method should be overridden to return ",(0,a.mdx)("inlineCode",{parentName:"p"},"true"),". Override ",(0,a.mdx)("inlineCode",{parentName:"p"},"poolSize()")," to configure the amount of items in the pool, as shown in the example below:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/SampleTextInput.kt start=start_preallocation_example end=end_preallocation_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/SampleTextInput.kt",start:"start_preallocation_example",end:"end_preallocation_example"},"override fun canPreallocate(): Boolean = true\n\noverride fun poolSize(): Int {\n  return 10\n}\n")),(0,a.mdx)("p",null,"For the SampleTextInput component example above, ten instances of EditText will be created and pre-allocated in the recycling pool."))}f.isMDXComponent=!0}}]);