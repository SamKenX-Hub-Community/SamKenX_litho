"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4333],{7772:(e,n,a)=>{a.d(n,{Z:()=>u});var o=a(87462),t=a(67294),i=a(23746),l=a(7694),m=a(13618),r="0.47.0",d="0.48.0-SNAPSHOT",p="0.10.5",s="0.142.0",c=a(86668);const u=function(e){var n=e.language,a=e.code.replace(/{{site.lithoVersion}}/g,r).replace(/{{site.soloaderVersion}}/g,p).replace(/{{site.lithoSnapshotVersion}}/g,d).replace(/{{site.flipperVersion}}/g,s).trim(),u=(0,c.L)().isDarkTheme?m.Z:l.Z;return t.createElement(i.ZP,(0,o.Z)({},i.lG,{code:a,language:n,theme:u}),(function(e){var n=e.className,a=e.style,o=e.tokens,i=e.getLineProps,l=e.getTokenProps;return t.createElement("pre",{className:n,style:a},o.map((function(e,n){return t.createElement("div",i({line:e,key:n}),e.map((function(e,n){return t.createElement("span",l({token:e,key:n}))})))})))}))}},47259:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>b,frontMatter:()=>r,metadata:()=>p,toc:()=>c});var o=a(87462),t=a(63366),i=(a(67294),a(3905)),l=a(44996),m=(a(74866),a(85162),a(7772),["components"]),r={id:"dynamic-props-bindto",title:"Animating View Properties with Dynamic Props"},d=void 0,p={unversionedId:"animations/dynamic-props-bindto",id:"animations/dynamic-props-bindto",title:"Animating View Properties with Dynamic Props",description:"Dynamic props are properties that are applied directly to a View or Drawable. They are updated without computing a layout or remounting. This makes them efficient for use in animations or other dynamic UIs. Dynamic props are initialised and updated using DynamicValue.",source:"@site/../docs/animations/dynamic-props-bindto.mdx",sourceDirName:"animations",slug:"/animations/dynamic-props-bindto",permalink:"/docs/animations/dynamic-props-bindto",draft:!1,editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/animations/dynamic-props-bindto.mdx",tags:[],version:"current",frontMatter:{id:"dynamic-props-bindto",title:"Animating View Properties with Dynamic Props"},sidebar:"mainSidebar",previous:{title:"Customizing Transitions",permalink:"/docs/animations/transition-choreography"},next:{title:"More Ways to Define Transitions",permalink:"/docs/animations/transition-definitions"}},s={},c=[{value:"<code>DynamicValue</code>",id:"dynamicvalue",level:2},{value:"Common Dynamic Props",id:"common-dynamic-props",level:2},{value:"Custom Dynamic Props for SimpleMountable",id:"custom-dynamic-props-for-simplemountable",level:2},{value:"BindTo - Dynamic Values API in Practice",id:"bindto---dynamic-values-api-in-practice",level:3},{value:"Key points for the BindTo API",id:"key-points-for-the-bindto-api",level:3},{value:"Animating Dynamic Props",id:"animating-dynamic-props",level:2}],u={toc:c},h="wrapper";function b(e){var n=e.components,a=(0,t.Z)(e,m);return(0,i.mdx)(h,(0,o.Z)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("admonition",{type:"note"},(0,i.mdx)("p",{parentName:"admonition"},"Dynamic props are properties that are applied directly to a ",(0,i.mdx)("inlineCode",{parentName:"p"},"View")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"Drawable"),". They are updated without computing a layout or remounting. This makes them efficient for use in animations or other dynamic UIs. Dynamic props are initialised and updated using ",(0,i.mdx)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/litho/DynamicValue.html"},"DynamicValue"),".")),(0,i.mdx)("h2",{id:"dynamicvalue"},(0,i.mdx)("inlineCode",{parentName:"h2"},"DynamicValue")),(0,i.mdx)("p",null,"In ",(0,i.mdx)("inlineCode",{parentName:"p"},"KComponents"),", a ",(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue")," can be created using ",(0,i.mdx)("inlineCode",{parentName:"p"},"useBinding()"),". You can then keep a reference to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue")," and use it to directly set values (such as in a callback or an ",(0,i.mdx)("inlineCode",{parentName:"p"},"Animator"),"). Use the ",(0,i.mdx)("inlineCode",{parentName:"p"},"set()")," function to set new values from the main thread."),(0,i.mdx)("admonition",{type:"caution"},(0,i.mdx)("p",{parentName:"admonition"},(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue"),"s should only be updated on the main thread.")),(0,i.mdx)("h2",{id:"common-dynamic-props"},"Common Dynamic Props"),(0,i.mdx)("p",null,"The dynamic properties that are available for all ",(0,i.mdx)("inlineCode",{parentName:"p"},"Component"),"s are:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Alpha"),(0,i.mdx)("li",{parentName:"ul"},"Scale X/Y"),(0,i.mdx)("li",{parentName:"ul"},"Translation X/Y"),(0,i.mdx)("li",{parentName:"ul"},"Background Color"),(0,i.mdx)("li",{parentName:"ul"},"Foreground Color"),(0,i.mdx)("li",{parentName:"ul"},"Rotation"),(0,i.mdx)("li",{parentName:"ul"},"Elevation (from Lollipop and above)")),(0,i.mdx)("p",null,"For ",(0,i.mdx)("inlineCode",{parentName:"p"},"KComponent"),"s they should be applied as a Style item:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin"},"MyKComponent(style = Style.alpha(dynamicAlpha))\n")),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue")," can be updated by calling its ",(0,i.mdx)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/litho/DynamicValue.html#set-T-"},"set()")," function."),(0,i.mdx)("p",null,"The following code sample shows a ",(0,i.mdx)("inlineCode",{parentName:"p"},"Component")," that renders a square in the middle of the screen. The alpha and scale props have been set to the DynamicValue's, which are updated by two SeekBars."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/animations/dynamicprops/CommonDynamicPropsKComponent.kt  start=start_example end=end_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/animations/dynamicprops/CommonDynamicPropsKComponent.kt","":!0,start:"start_example",end:"end_example"},"class CommonDynamicPropsKComponent : KComponent() {\n\n  override fun ComponentScope.render(): Component? {\n    val scale = useBinding(1f)\n    val alpha = useBinding(1f)\n\n    val square =\n        Column(\n            style =\n                Style.width(100.dp)\n                    .height(100.dp)\n                    .backgroundColor(colorRes(R.color.primaryColor))\n                    .alignSelf(YogaAlign.CENTER)\n                    .scaleX(scale)\n                    .scaleY(scale)\n                    .alpha(alpha))\n\n    return Column(justifyContent = YogaJustify.SPACE_BETWEEN, style = Style.padding(all = 20.dp)) {\n      child(SeekBar(onProgressChanged = { alpha.set(it) }))\n      child(square)\n      child(SeekBar(onProgressChanged = { scale.set(it) }))\n    }\n  }\n}\n")),(0,i.mdx)("p",null,"The following short animation illustrates the component in action."),(0,i.mdx)("video",{loop:"true",autoplay:"true",class:"video",width:"100%",height:"500px",muted:"true"},(0,i.mdx)("source",{type:"video/webm",src:(0,l.default)("/videos/common_dynamic_props.webm")}),(0,i.mdx)("p",null,"Your browser does not support the video element.")),(0,i.mdx)("p",null,"To see how other common dynamic props can be modified, see the ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/facebook/litho/tree/master/sample/src/main/java/com/facebook/samples/litho/kotlin/animations/dynamicprops/AllCommonDynamicPropsKComponent.kt"},"All Common Dynamic Props")," example in the Sample app, which is illustrated in the following animation."),(0,i.mdx)("video",{loop:"true",autoplay:"true",class:"video",width:"100%",height:"500px",muted:"true"},(0,i.mdx)("source",{type:"video/webm",src:(0,l.default)("/videos/all_dynamic_props.webm")}),(0,i.mdx)("p",null,"Your browser does not support the video element.")),(0,i.mdx)("h2",{id:"custom-dynamic-props-for-simplemountable"},"Custom Dynamic Props for SimpleMountable"),(0,i.mdx)("p",null,"Dynamic Mount Props property types enable the value of the property, on the content mounted by the SimpleMountable, to be updated without triggering a new layout (such as when animating the text colour of a Text component)."),(0,i.mdx)("h3",{id:"bindto---dynamic-values-api-in-practice"},"BindTo - Dynamic Values API in Practice"),(0,i.mdx)("p",null,"To illustrate the use of BindTo API in practice, you will implement a simple ",(0,i.mdx)("inlineCode",{parentName:"p"},"ImageViewComponent")," that will have ",(0,i.mdx)("inlineCode",{parentName:"p"},"background"),", ",(0,i.mdx)("inlineCode",{parentName:"p"},"rotation")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"scale")," properties animated, based on the ",(0,i.mdx)("inlineCode",{parentName:"p"},"SeekBar")," value."),(0,i.mdx)("p",null,"Start off by defining each ",(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue")," by using the ",(0,i.mdx)("inlineCode",{parentName:"p"},"useBinding")," hook and attaching it to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"SeekBar.onProgressChanged")," callback that will change them accordingly:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/MountableBindToExampleComponent.kt start=start_bindTo_seekbar_code end=end_bindTo_seekbar_code",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/MountableBindToExampleComponent.kt",start:"start_bindTo_seekbar_code",end:"end_bindTo_seekbar_code"},'override fun ComponentScope.render(): Component? {\n  val background = useBinding(50f)\n  val rotation = useBinding(0f)\n  val scale = useBinding(1f)\n  return Column(style = Style.padding(all = 20.dp)) {\n    child(\n        SeekBar(\n            initialValue = 0f,\n            label = "background",\n            onProgressChanged = { backgroundValue -> background.set(backgroundValue) }))\n    child(\n        SeekBar(\n            initialValue = 0f,\n            label = "rotation",\n            onProgressChanged = { rotationValue ->\n              rotation.set(evaluate(rotationValue, 0f, 360f))\n            }))\n    child(\n        SeekBar(\n            initialValue = 1f,\n            label = "scale",\n            onProgressChanged = { scaleValue -> scale.set(evaluate(scaleValue, .75f, 1.25f)) }))\n')),(0,i.mdx)("p",null,"The MountableComponent, ",(0,i.mdx)("inlineCode",{parentName:"p"},"ImageViewComponent"),", will be defined as a child below the SeekBar children in the ",(0,i.mdx)("inlineCode",{parentName:"p"},"render()")," function and will take each ",(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue")," as a constructor parameter:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/MountableBindToExampleComponent.kt start=start_bindTo_imagecomponent_def end=end_bindTo_imagecomponent_def",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/MountableBindToExampleComponent.kt",start:"start_bindTo_imagecomponent_def",end:"end_bindTo_imagecomponent_def"},"child(\n    Column(style = Style.width(100.dp).height(100.dp).margin(all = 50.dp)) {\n      child(ImageViewComponent(background = background, rotation = rotation, scale = scale))\n    })\n")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/ImageViewComponent.kt start=start_bindTo_imagecomponent_code end=end_bindTo_imagecomponent_code",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/ImageViewComponent.kt",start:"start_bindTo_imagecomponent_code",end:"end_bindTo_imagecomponent_code"},"class ImageViewComponent(\n    private val rotation: DynamicValue<Float>,\n    private val background: DynamicValue<Float>,\n    private val scale: DynamicValue<Float>,\n    private val style: Style? = null\n) : MountableComponent() {\n")),(0,i.mdx)("p",null,"Now, in the MountableComponent ",(0,i.mdx)("inlineCode",{parentName:"p"},"render()")," call, use the ",(0,i.mdx)("inlineCode",{parentName:"p"},"bindTo")," API to bind each ",(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue")," to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"ImageView")," properties."),(0,i.mdx)("p",null,"There are two ways of using ",(0,i.mdx)("inlineCode",{parentName:"p"},"BindTo"),":"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},"The simpler way is to create a binding between the ",(0,i.mdx)("inlineCode",{parentName:"li"},"DynamicValue")," and function reference to the setter of the property.",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"The setter will be invoked for every update of the DynamicValue."))),(0,i.mdx)("li",{parentName:"ol"},"The more complex binding can be achieved by using a lambda and accessing the view directly, as shown in the following snippet.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/ImageViewComponent.kt start=start_bindTo_binding_code end=end_bindTo_binding_code",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/ImageViewComponent.kt",start:"start_bindTo_binding_code",end:"end_bindTo_binding_code"},"override fun MountableComponentScope.render(): MountableRenderResult {\n  // simple binding\n  rotation.bindTo(0f, ImageView::setRotation)\n  scale.bindTo(1f, ImageView::setScaleX)\n  scale.bindTo(1f, ImageView::setScaleY)\n\n  // complex binding\n  background.bindTo(0f) { view: ImageView, value ->\n    view.setBackgroundColor(Color.HSVToColor(floatArrayOf(evaluate(value, 0f, 360f), 1f, 1f)))\n  }\n")),(0,i.mdx)("p",null,"The following short video shows the BindTo API in action:"),(0,i.mdx)("video",{loop:"true",autoplay:"true",class:"video",width:"100%",height:"500px",muted:"true"},(0,i.mdx)("source",{type:"video/webm",src:(0,l.default)("/videos/bindToAPI.mov")}),(0,i.mdx)("p",null,"Your browser does not support the video element.")),(0,i.mdx)("h3",{id:"key-points-for-the-bindto-api"},"Key points for the BindTo API"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"A ",(0,i.mdx)("inlineCode",{parentName:"li"},"DynamicValue")," has to be bound to the SimpleMountable in ",(0,i.mdx)("inlineCode",{parentName:"li"},"MountableComponentScope.render()"),"."),(0,i.mdx)("li",{parentName:"ul"},"A SimpleMountable can have several dynamic props."),(0,i.mdx)("li",{parentName:"ul"},"It is possible to automatically unbind the ",(0,i.mdx)("inlineCode",{parentName:"li"},"DynamicValue")," by setting the default value after ",(0,i.mdx)("inlineCode",{parentName:"li"},"unmount()")," is called.")),(0,i.mdx)("h2",{id:"animating-dynamic-props"},"Animating Dynamic Props"),(0,i.mdx)("p",null,"Dynamic Props values can be used with Android Animators to create custom animations. The following example uses a ",(0,i.mdx)("a",{parentName:"p",href:"https://developer.android.com/reference/android/animation/ValueAnimator"},"ValueAnimator")," to animate the dynamic value ",(0,i.mdx)("inlineCode",{parentName:"p"},"time"),", defined in the previous value."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/animations/dynamicprops/AnimateDynamicPropsKComponent.kt  start=start_example end=end_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/animations/dynamicprops/AnimateDynamicPropsKComponent.kt","":!0,start:"start_example",end:"end_example"},'class AnimateDynamicPropsKComponent : KComponent() {\n\n  override fun ComponentScope.render(): Component {\n    val time = useBinding(0L)\n    val animator = useRef<ValueAnimator?> { null }\n\n    val startAnimator: (ClickEvent) -> Unit = {\n      animator.value?.cancel()\n      animator.value =\n          ValueAnimator.ofInt(0, TimeUnit.HOURS.toMillis(12).toInt()).apply {\n            duration = 2000\n            interpolator = AccelerateDecelerateInterpolator()\n            addUpdateListener { time.set((it.animatedValue as Int).toLong()) }\n          }\n      animator.value?.start()\n    }\n\n    return Column(alignItems = YogaAlign.CENTER, style = Style.padding(all = 20.dp)) {\n      child(Text("Click to Start Animation", style = Style.onClick(action = startAnimator)))\n      child(\n          ClockFace.create(context)\n              .time(time)\n              .widthDip(200f)\n              .heightDip(200f)\n              .marginDip(YogaEdge.TOP, 20f)\n              .build())\n    }\n  }\n}\n')),(0,i.mdx)("p",null,"A ",(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue")," is used to represent time.  This is passed to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"Component")," as a prop and kept as a reference to it so it can be updated. In a click event, a ValueAnimator is set up that updates the time ",(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue")," each frame (see the following animation). The ",(0,i.mdx)("a",{parentName:"p",href:"https://developer.android.com/reference/android/animation/ValueAnimator"},"ValueAnimator")," is stored in a reference so that it can be cancelled if necessary."),(0,i.mdx)("video",{loop:"true",autoplay:"true",class:"video",width:"100%",height:"500px",muted:"true"},(0,i.mdx)("source",{type:"video/webm",src:(0,l.default)("/videos/custom_prop_animation.webm")}),(0,i.mdx)("p",null,"Your browser does not support the video element.")),(0,i.mdx)("p",null,"For more examples of creating Animations using Common Dynamic Props, see the ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/facebook/litho/tree/master/sample/src/main/java/com/facebook/samples/litho/java/animations/animationcookbook"},"Animations Cook Book")," in the Sample App."))}b.isMDXComponent=!0}}]);