"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6965],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>c,MDXProvider:()=>u,mdx:()=>v,useMDXComponents:()=>p,withMDXComponents:()=>m});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},a.apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),m=function(e){return function(t){var n=p(t.components);return o.createElement(e,a({},t,{components:n}))}},p=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(c.Provider,{value:t},e.children)},d="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},b=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),u=r,d=m["".concat(i,".").concat(u)]||m[u]||f[u]||a;return n?o.createElement(d,l(l({ref:t},c),{},{components:n})):o.createElement(d,l({ref:t},c))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=b;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}b.displayName="MDXCreateElement"},39529:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>f,frontMatter:()=>l,metadata:()=>c,toc:()=>p});var o=n(87462),r=n(63366),a=(n(67294),n(3905)),i=["components"],l={id:"overview",title:"Overview"},s=void 0,c={unversionedId:"mainconcepts/mountablecomponents/overview",id:"mainconcepts/mountablecomponents/overview",title:"Overview",description:"Mountable Components are used to render views or drawables and are a replacement for the old Java Specs API-based Mount Specs.",source:"@site/../docs/mainconcepts/mountablecomponents/overview.mdx",sourceDirName:"mainconcepts/mountablecomponents",slug:"/mainconcepts/mountablecomponents/overview",permalink:"/docs/mainconcepts/mountablecomponents/overview",draft:!1,editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/mainconcepts/mountablecomponents/overview.mdx",tags:[],version:"current",frontMatter:{id:"overview",title:"Overview"},sidebar:"mainSidebar",previous:{title:"useLiveData",permalink:"/docs/mainconcepts/use-live-data"},next:{title:"Creating a Mountable Component",permalink:"/docs/mainconcepts/mountablecomponents/mountable-component"}},m={},p=[],u={toc:p},d="wrapper";function f(e){var t=e.components,n=(0,r.Z)(e,i);return(0,a.mdx)(d,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,"Mountable Components are used to render views or drawables and are a replacement for the old Java Specs API-based ",(0,a.mdx)("a",{parentName:"p",href:"/docs/codegen/mount-specs"},"Mount Specs"),"."),(0,a.mdx)("p",null,"Mountable Components should only be created when you need to integrate your own views/drawables with Litho. Here, ",(0,a.mdx)("em",{parentName:"p"},"Mount")," refers to the operation performed by all components in a layout tree to extract their rendered state (a 'View' or a 'Drawable') to be displayed."),(0,a.mdx)("p",null,"The Mountable Components section contains the following pages:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"/docs/mainconcepts/mountablecomponents/mountable-component"},"Creating a Mountable Component")," - details how to create a Component responsible for rendering a View or Drawable. Also, compares Mountable Components with KComponents."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"/docs/mainconcepts/mountablecomponents/mountable"},"Lifecycle of a SimpleMountable")," - covers the purpose and creation of a SimpleMountable in addition to how to create and mount its content."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"/docs/mainconcepts/mountablecomponents/mountable-measuring"},"Measuring")," - shows different strategies to measure the content the Mountable Component will render."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"/docs/mainconcepts/mountablecomponents/mountable-controllers"},"Controllers Pattern")," - illustrates the use of controllers by implementing a simple TimePicker that shows an arbitrary time."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"/docs/mainconcepts/mountablecomponents/mountable-preallocation"},"Content Pooling")," - details a strategy that can be used to populate the content pools to optimise first mount performance.")),(0,a.mdx)("p",null,"Information and step-by-step explanations of how to migrate to Mountable Components from already existing components can be found in the following documents:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"/docs/kotlin/migrating-from-mountspecs"},"Migrating from MountSpecs")," - details the process of migrating from MountSpec API."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"/docs/kotlin/kotlin-api-cheatsheet"},"Cheatsheet")," - set of links for the migration of individual aspects of existing code from the Java Spec API to Kotlin API.")))}f.isMDXComponent=!0}}]);